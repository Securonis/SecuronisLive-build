#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
import subprocess
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                            QHBoxLayout, QLabel, QPushButton, QRadioButton, 
                            QButtonGroup, QMessageBox, QGroupBox)
from PyQt5.QtGui import QIcon, QFont, QPalette, QColor
from PyQt5.QtCore import Qt

class DNSChanger(QMainWindow):
    def __init__(self):
        super().__init__()
        self.initUI()
        
    def initUI(self):
        # DNS providers with their primary and secondary DNS addresses
        self.dns_providers = {
            "Cloudflare": ["1.1.1.1", "1.0.0.1"],
            "OpenDNS": ["208.67.222.222", "208.67.220.220"],
            "Quad9": ["9.9.9.9", "149.112.112.112"],
            "AdGuard": ["94.140.14.14", "94.140.15.15"],
            "Yandex": ["77.88.8.8", "77.88.8.1"],
            "CleanBrowsing": ["185.228.168.9", "185.228.169.9"],
            "Comodo Secure": ["8.26.56.26", "8.20.247.20"],
            "Google": ["8.8.8.8", "8.8.4.4"]
        }
        
        # Set window properties
        self.setWindowTitle('SecDNSChanger')
        self.setGeometry(300, 300, 500, 400)
        
        # Create central widget
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Main layout
        main_layout = QVBoxLayout()
        central_widget.setLayout(main_layout)
        
        # Title
        title_label = QLabel('DNS Changer')
        title_label.setFont(QFont('Arial', 18, QFont.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(title_label)
        
        # Description
        desc_label = QLabel('Please select the DNS provider you want to use:')
        desc_label.setFont(QFont('Arial', 10))
        desc_label.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(desc_label)
        
        # DNS providers group
        dns_group = QGroupBox("DNS Providers")
        dns_layout = QVBoxLayout()
        dns_group.setLayout(dns_layout)
        
        # Radio buttons for DNS providers
        self.dns_button_group = QButtonGroup(self)
        
        for i, provider in enumerate(self.dns_providers.keys()):
            dns_radio = QRadioButton(f"{provider} ({', '.join(self.dns_providers[provider])})")
            self.dns_button_group.addButton(dns_radio, i)
            dns_layout.addWidget(dns_radio)
        
        # Select the first option by default
        self.dns_button_group.button(0).setChecked(True)
        
        main_layout.addWidget(dns_group)
        
        # Buttons layout
        buttons_layout = QHBoxLayout()
        
        # Apply button
        self.apply_button = QPushButton('Apply')
        self.apply_button.clicked.connect(self.apply_dns)
        buttons_layout.addWidget(self.apply_button)
        
        # Current DNS button
        self.current_button = QPushButton('Current DNS')
        self.current_button.clicked.connect(self.show_current_dns)
        buttons_layout.addWidget(self.current_button)
        
        main_layout.addLayout(buttons_layout)
        
        # Status label - with smaller size
        self.status_label = QLabel('')
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setFont(QFont('Arial', 8))  # Smaller font
        self.status_label.setFixedHeight(20)  # Fixed smaller height
        main_layout.addWidget(self.status_label)
        
        self.show()
    
    def get_selected_dns(self):
        selected_id = self.dns_button_group.checkedId()
        if selected_id >= 0:
            provider = list(self.dns_providers.keys())[selected_id]
            return provider, self.dns_providers[provider]
        return None, None
    
    def apply_dns(self):
        provider, dns_servers = self.get_selected_dns()
        if not provider:
            return
        
        try:
            # Get the current resolv.conf content to backup
            try:
                with open('/etc/resolv.conf', 'r') as f:
                    old_content = f.read()
            except Exception:
                # If we can't read the file, just continue
                pass
            
            # Create new resolv.conf content
            new_content = "# Generated by DNS Changer\n"
            for server in dns_servers:
                new_content += f"nameserver {server}\n"
            
            # Use pkexec to run with elevated privileges
            cmd = f"pkexec sh -c 'cat > /etc/resolv.conf << EOF\n{new_content}EOF\n'"
            subprocess.run(cmd, shell=True, check=True)
            
            self.status_label.setText(f"{provider} DNS settings applied successfully")
            QMessageBox.information(self, 'Success', f"{provider} DNS settings applied successfully.")
        except Exception as e:
            self.status_label.setText(f"Error: {str(e)}")
            QMessageBox.critical(self, 'Error', f"Could not change DNS: {str(e)}")
    
    def show_current_dns(self):
        try:
            # Get current DNS servers from resolv.conf
            try:
                with open('/etc/resolv.conf', 'r') as f:
                    content = f.read()
                
                # Extract nameserver lines
                nameservers = []
                for line in content.splitlines():
                    if line.strip().startswith('nameserver'):
                        nameservers.append(line.strip().split()[1])
                
                if nameservers:
                    dns_text = "\n".join([f"â€¢ {ns}" for ns in nameservers])
                    QMessageBox.information(self, 'Current DNS Servers', f"Currently used DNS servers:\n\n{dns_text}")
                else:
                    QMessageBox.information(self, 'Current DNS Servers', "No configured DNS servers found.")
            except FileNotFoundError:
                QMessageBox.information(self, 'Current DNS Servers', "No resolv.conf file found. DNS may be managed by another system.")
        except Exception as e:
            QMessageBox.critical(self, 'Error', f"Could not get DNS information: {str(e)}")

def set_dark_theme(app):
    # Set dark theme
    dark_palette = QPalette()
    
    # Set color roles from dark to light
    dark_palette.setColor(QPalette.Window, QColor(53, 53, 53))
    dark_palette.setColor(QPalette.WindowText, Qt.white)
    dark_palette.setColor(QPalette.Base, QColor(35, 35, 35))
    dark_palette.setColor(QPalette.AlternateBase, QColor(53, 53, 53))
    dark_palette.setColor(QPalette.ToolTipBase, QColor(25, 25, 25))
    dark_palette.setColor(QPalette.ToolTipText, Qt.white)
    dark_palette.setColor(QPalette.Text, Qt.white)
    dark_palette.setColor(QPalette.Button, QColor(53, 53, 53))
    dark_palette.setColor(QPalette.ButtonText, Qt.white)
    dark_palette.setColor(QPalette.BrightText, Qt.red)
    dark_palette.setColor(QPalette.Link, QColor(42, 130, 218))
    dark_palette.setColor(QPalette.Highlight, QColor(42, 130, 218))
    dark_palette.setColor(QPalette.HighlightedText, Qt.black)
    
    # Apply the dark palette
    app.setPalette(dark_palette)
    
    # Set stylesheets for better appearance
    app.setStyleSheet("QToolTip { color: #ffffff; background-color: #2a82da; border: 1px solid white; }"
                      "QGroupBox { border: 1px solid gray; border-radius: 5px; margin-top: 7px; }"
                      "QGroupBox::title { subcontrol-origin: margin; left: 10px; padding: 0 3px 0 3px; }"
                      "QPushButton { background-color: #3a3a3a; border: 1px solid #5c5c5c; padding: 5px; border-radius: 3px; }"
                      "QPushButton:hover { background-color: #4a4a4a; }"
                      "QPushButton:pressed { background-color: #2a2a2a; }"
                      "QRadioButton::indicator { width: 13px; height: 13px; }"
                      "QRadioButton::indicator::unchecked { border: 1px solid #5c5c5c; border-radius: 7px; background-color: #3a3a3a; }"
                      "QRadioButton::indicator::checked { border: 1px solid #5c5c5c; border-radius: 7px; background-color: #2a82da; }")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    app.setStyle('Fusion')  # Use Fusion style for a modern look
    set_dark_theme(app)     # Apply dark theme
    dns_changer = DNSChanger()
    sys.exit(app.exec_())
